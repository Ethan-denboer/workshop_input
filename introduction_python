---
jupytext:
  cell_metadata_filter: -all
  formats: md:myst
  text_representation:
    extension: .md
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.11.5
kernelspec:
  display_name: Python 3
  language: python
  name: python3
---

# Lesson 1: Introduction to Python and Jupyter Notebooks
This lesson will give a short introduction on how to work with Notebooks in combination with Python.
Within the lesson explanation and assignments are given. To get the most of this lesson it is best to manually type the code into your Jupyter Notebook instead of copy-pasting.

## Notebooks
First, lets start up Jupyter and open a notebook.
In the searchbox, type 'jupyter' and open *jupyter notebook*.
This should open a tab in your browser with the jupyter hub in the installation folder. 
This folder will act as your home folder for jupyter.
All notebooks you make will be stored here unless explicitely saved elsewhere or moved.

To open a new python jupyter notebook click the **new** button in the topright corner and select **python3** from the drowdown list.
A new tab should open dispaying your new Notebook, usually called *Untitled*

Lets rename the Notebook to something a bit more recognizable. Rename the notebook by clicking on the name and typing a better name, such as 'Awesome XML workshop at DHBenelux'.

**To add:** screenshots 

A Notebook is not a static webpage, but an interactive enviroment. Within the blocks (cells) of a Notebook code can be written Ã¡nd executed.

## How does a Notebook work?

### Different cells

Notebooks are comprimised of different types of cells. 
The main cell types are *text cells* and *code cells*.

Text cells are generally used for descriptions and explantions. These cells are inactive and code written in these cells cannot be executed.

The layout is managed through *markdown* (see [markdown syntax](https://www.markdownguide.org/basic-syntax/) for more information).

The second main type of cell is the code cell. 
Code cells are used to write and execute code. In our case Python. When a code cell is run, Python will execute the code in the cell.

Code cells are recognizable by the 'In [ ]:' to the left of the cell.

The type of a cell can be changed by selecting a cell and either going through the menu (Cell/Cell Type/<option>) or by selecting a cell and pressing either **Y** for a code cell or **M** for a text cell.

**ADD printscreen menu celltype**

```{admonition} Exercise
:class: attention
Select a cell in the Notebook and change the type by using the hotkeys or the menu. What type of cell did the cell start out as?
```


### Running cells
There are multiple ways to run a cell:
* By clicking the 'Run' button in the taskbar;
* By pressing 'shift + enter when the cell is selected (green frame)'
	*Note that this will add a new cell below the cell that was run.*
The moment a cell generates *output* the output is displayed beneath the cell, keeping code and output together.

```{admonition} Exercise 
:class: attention
Type the code below in a cell in your Notebook and run the cell.
```

```{code-cell} 

2*8
```

```{note}
When the code does not give output after running it, check the cell type!
```

### Comments

Comments can be added to a code cell. Comments can be used to describe what a piece of code does, or can be used to tell where values can be changed. 

```{code-cell} 

# This is an example of a comment in a code cell.
```

The moment a # is typed in a code cell, everything after it will be regarded as a comment. Lines that have been marked as a comment will **not** be executed by Python when the cell is run.

```{admonition} Exercise 
:class: attention
Type the code below in a cell in your Notebook and run the cell. Does Python return output?
```

```{code-cell} 

#print("The solution to 35+12 is:")
#print(35+12)
```

When the **#** is removed and the cell is run again, Python wil recognize the code and execute it.

```{admonition} Exercise
:class: attention
Ensure that Python executes the code and run the cell again.
```

## Python

Below will follow a short introduction of Python. 
Python was developed in 1991 by Guido van Rossum. The purpose of Python was to create a programming language that is both simple to understand and readable. Python is open source, and can be used for free.

### Input en variables

When using Python there are multiple types of input data, such as lists, numbers, text, and even whole tables.
We put this input into *variables*. Essentially a container for the data. The name of a variable is up to your own discretion, although there are some [rules and guidlines](https://www.w3schools.com/python/gloss_python_variable_names.asp). 

Python remembers which input was loaded into which variable. This means that the variables can be used in the code instead of the data itself.

It is important to input data correctly, for numbers *no* quotation marks are used, for text quotation marks *must be* used!

The command *type()* can be used to determine what type of input a variable contains. 

*int* indicates a variable contains an integer, or whole number
*str* indicates a variable contains a string, a piece of text. 

**Assignment** Type the code below in a cell in your Notebook and run the cell.


```{code-cell} 

number = 9
text = "this is a text"
```


```{code-cell} 

type(number)
```


```{code-cell} 

type(text)
```


**Important!** If you input a number *with* quotation marks Python will see it as text!

```{admonition} Exercise 
:class: attention
Type the code below in a cell in your Notebook and run the cell.
```

```{code-cell} 

number_but_wrong = "9"
```


```{code-cell} 

type(number_but_wrong)
```


As mentioned above it is possible to use previously assigned variables in your code. 

```{admonition} Exercise
:class: attention
 Type the code below in a cell in your Notebook and run the cell.
```

```{code-cell} 

number_1 = 3
number_2 = 6

number_1 + number_2 
```


```{admonition} Exercise
:class: attention
Using Python, calculate the sum of "35 + 69" in the cell below. Start with making two variables to assign the numbers *35* and *69* to. Calculate the sum using these variables.
```

```{code-cell} 

# Make a variable for the number 35

# Make a variable for the number 69

# Calculate the sum using the variables

```

The plus sign can be used to calculate sums, as you did in the above assignment. However, the plus sign can also be used to stick two different texts together. 

```{admonition} Exercise
:class: attention
Type the code below in a cell in your Notebook and run the cell.
```

```{code-cell} 

line_1 = "This is a "
line_2 = "stuck together text"

line_1 + line_2
```


```{admonition} Exercise
:class: attention
Ensure that the four lines below are printed as one sentence in the output.
```

```{code-cell} 

line_1 = "Because of this Notebook "
line_2 = "I now know "
line_3 = "that programming with Python "
line_4 = "is very fun!"

```

### Functions

When you program in Python you will make use of functions. Python contains a lot of built-in functions that are ready to use. Saving us a lot of manual coding!

Functions need to be passed one or more parameters as input. The syntax of a function is as follows: *functionname(parameters)*. When there are multiple parameters these are seperated with a comma.

You can find some examples below.

```{admonition} Exercise
:class: attention
Type the code below in a cell in your Notebook and run the cell
```

```{code-cell} 

# Calculate the highest number using the max() function.
max(5, 8, 35, 4, 75, 2)
```

```{admonition} Exercise
:class: attention
Round the number below using the round() function. The first parameter is the number to round. The second number is the required number of decimals. Type the code below in a cell in your Notebook and run the cell
```

```{code-cell} 

round(36.53343, 2)
```

```{admonition} Exercise
:class: attention
Calculate the *lowest* number using the function min(). This functions works similarly to the previously used max() function.
Use the following numbers: 6, 24, 8, 2, 14. 
```

### Packages

The last important thing to know is that Python works with packages. A package is a collection of modules with predefined functions. These functions can than be used in your own code. Using packages can save a lot of programming work and enhances the functionality of base Python. Most Python programmers regularly use packages.

Before using a Python package it needs to be *installed*. This preferably done using the command line but can also be done within your Jupyter Notebook.

Afterwards the package needs to be *imported* into the Notebook. After importing the package is ready for use.

Below you can find an example of installing, importing and using a package that measures the distances between two texts.

```{admonition} Exercise
:class: attention
Type the code below in a cell in your Notebook and run the cell
```

```{code-cell} 

# Install the package
!pip install textdistance
```

```{code-cell} 

# Import the package
import textdistance
```

A package can be used in the same way as a function.
In the case of the package used below, there are multiple methods for the calculation of the difference between texts. Among others there are the options 'hamming' and 'levenshtein'. The option that you want to use is added afte the name of the package. 

Syntax: *packagename.option(parameters)*

```{admonition} Exercise
:class: attention
Type the code below in a cell in your Notebook and run the cell.
```

```{code-cell} 

# Make two variables with a line of text.
text1 = "Lesser leather never weathered wetter weather better"
text2 = "Lesser leather never weathered wethter weater better"

# Calculate the difference using the hamming option
textdistance.hamming(text1, text2)
```


```{admonition} Exercise
:class: attention
Calculate the difference between texts using the levenshtein option.
```

```{admonition} Exercise
:class: attention
For this assignment you will combine the previous steps to use the package 'passwordmeter'. You will use this package to measure the strength of three passwords, and determine how they can be improved.

You will test the following passwords: 
1: Welcome1234!
2: idJH$ndjj165@&4SGDJEh
3: PythonIsAweSome!?!

To complete this assignemnt you will need to complete the following steps:
* Install the package 'passwordmeter'
* Import the package 
* Calculate the password strenght per password using the in-built function 'test' using the following syntax: *packagename.function(password)*
```

## The End 
